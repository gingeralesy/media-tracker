(in-package #:media-tracker)

(defun vlc-current-track (&key login password)
  (handler-case
      (loop with status = (vlc-status :login login :password password)
            for info across (lquery:$ status "root > information > category[name=\"meta\"] > info")
            for name = (plump:attribute info "name")
            for key = (when (and name (< 0 (length name)))
                        (intern (cl-ppcre:regex-replace-all "_" (string-upcase name) "-") :keyword))
            and value = (plump:decode-entities (plump:text info) T)
            when (and key value) nconc (list key value))
    (usocket:socket-error (condition)
      (v:warn :media-tracker.vlc "Failed to connect to VLC: ~a" condition))))

(defun vlc-track-name (track &key album track-number)
  (declare (type boolean album track-number))
  (let ((title (getf track :title))
        (artist (getf track :artist))
        (album (when album (getf track :album)))
        (number (when track-number (getf track :track-number)))
        (filename (getf track :filename)))
    (cond
      ((and number artist album title)
       (format NIL "~a. ~a - ~a - ~a" number artist album title))
      ((and number artist title)
       (format NIL "~a. ~a - ~a" number artist title))
      ((and artist album title)
       (format NIL "~a - ~a - ~a" artist album title))
      ((and artist title)
       (format NIL "~a - ~a" artist title))
      ((and artist filename)
       (format NIL "~a - ~a" artist filename))
      (title (format NIL "~a" title))
      (filename (format NIL "~a" filename))
      (T ""))))
